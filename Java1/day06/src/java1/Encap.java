package java1;
/*
面向对象特征一：封装性 encapsulation)
1.为什么需要封装？
  随着我们系统越来越复杂，类会越来越多，那么类之间的访问边界必须把握好，
  面向对象的开发原则要遵循“高内聚、低耦合”。
  而“高内聚，低耦合”的体现之一：
    • 高内聚：类的内部数据操作细节自己完成，不允许外部干涉
    • 低耦合：仅暴露少量的方法给外部使用，尽量方便外部调用。
  通俗的讲，把该隐藏的隐藏起来，该暴露的暴露出来。这就是封装性的设计思想。
2.Java如何实现数据封装
2.1权限修饰符： public、 protected、 缺省、 private。具体访问范围如下：
修饰符 本类内部  本包内 其他包的子类  其他包非子类
private   √       ×       ×             ×
缺省      √       √       ×             ×
protected √       √       √             ×
public    √       √       √             √
3.具体修饰的结构：
– 外部类： public 、缺省
– 成员变量、成员方法、构造器、成员内部类： public 、 protected 、缺省、private
4.封装性的体现
4.1成员变量 属性私有化,私有化类的成员变量，提供公共的get和set方法，对外暴露获取和修改属性的功能。
  成员变量封装的好处：
  • 让使用者只能通过事先预定的方法来 访问数据，从而可以在该方法里面加入控制逻
  辑，限制对成员变量的不合理访问。还可以进行数据检查，从而有利于保证对象信息
  的完整性。
  • 便于修改，提高代码的可维护性。主要说的是隐藏的部分，在内部修改了，如果其对
  外可以的访问方式不变的话，外部根本感觉不到它的修改。
4.2私有化方法
5.注意：
开发中，一般成员实例变量都习惯使用private修饰，再提供相应的public权限的get/set方法访问。
对于final的实例变量，不提供set()方法。（后面final关键字的时候讲）
对于static final的成员变量，习惯上使用public修饰。
 */
public class Encap {
}
