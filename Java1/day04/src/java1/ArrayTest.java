package java1;

/*
1.数组( 是多个相同类型数据按一定顺序排列的集合，并使用一个名字命名，并通
过编号的方式 对这些数据进行统一管理。
2.数组的特点：
  • 数组本身是 引用数据类型，而数组中的元素可以是 任何数据类型，包括基本数据类
  型和引用数据类型。
  • 创建数组对象会在内存中开辟一整块 连续的空间。占据的空间的大小，取决于数组的
  长度和数组中元素的类型。
  • 数组中的元素在内存中是依次紧密排列的，有序的。
  • 数组，一旦初始化完成，其长度就是确定的。数组的 长度一旦确定，就不能修改。
  • 我们可以直接通过下标 或索引 的方式调用指定位置的元素，速度很快。
  • 数组名中引用的是这块连续空间的首地址。
3.一维数组的声明
语法:元素的数据类型[] 一维数组的名称;//推荐
4.数组的声明，需要明确：
（1）数组的维度：在Java中数组的符号是[]，[]表示一维，[][]表示二维。
（2）数组的元素类型：即创建的数组容器可以存储什么数据类型的数据。
     元素的类型可以是任意的Java的数据类型。例如：int、String、Student等。
（3）数组名：就是代表某个数组的标识符，数组名其实也是变量名，按照变量的命名规范来命名。
     数组名是个引用数据类型的变量，因为它代表一组数据。
5.一维数组的初始化
5.1静态初始化
  • 如果数组变量的初始化和数组元素的赋值操作同时进行，那就称为静态初始化。
  • 静态初始化，本质是用静态数据（编译时已知）为数组初始化。此时数组的长度由静
  态数据的个数决定。
  • 一维数组声明和静态初始化格式:
  数据类型[] 数组名 = new 数据类型[]{元素1,元素2,元素3,...};
  数据类型[] 数组名; 数组名 = new 数据类型[]{元素1,元素2,元素3,...};
    – new ：关键字，创建数组使用的关键字。因为数组本身是引用数据类型
    所以要用 new 创建数组实体。
5.2动态初始化
  数组变量的初始化和数组元素的赋值操作分开进行，即为动态初始化。
  动态初始化中，只确定了元素的个数（即数组的长度），而元素值此时只是默认值，还并未真正赋
  自己期望的值。真正期望的数据需要后续单独一个一个赋值。
  格式：
    数组存储的元素的数据类型[] 数组名字 = new 数组存储的元素的数据类型[长度];
    或
    数组存储的数据类型[] 数组名字; 数组名字 = new 数组存储的数据类型[长度];
    [长度]-->数组的长度，表示数组容器中可以最多存储多少个元素。
  注意：数组有定长特性，长度一旦指定，不可更改。和水杯道理相同，买了一个 2 升的水
  杯，总容量就是 2 升是固定的。
6.数组的关注点:
  1.数组的声明和初始化
    int a[] = new int[]{1,2,3};
    int a[] = new int[3];
  2.数组元素的调用
    a[0];
  3.数组的长度 .length
  4.遍历数组 for循环
  5.数组元素的默认值
    byte,short,int -->0
    long-->0L
    float-->0.0f
    double-->0.0
    char-->数字0或写为:'\u0000'(表现为空)
    boolean-->false
    引用类型-->null
  6.一维数组的内存解析
  虚拟机栈:用于存储正在执行的每个Java方法的局部变量表等。
    局部变量表存放了编译期可知长度<br/>的各种基本数据类型、对象引用，方法执行完，自动释放。
    先进后出
  堆内存:存储对象（包括数组对象），new来创建的，都存储在堆内存。
  方法区:存储已被虚拟机加载的类信息、常量、（静态变量）、即时编译器编译后的代码等数据
 */
public class ArrayTest {
  public static void main(String[] args) {
    //声明方式1:静态初始化
    double[] prices = new double[]{10.2,9.9};
    //声明方式2:动态初始化
    String[] foods = new String[4];

    int[] arr1 = {1,2,3};//类型推断
    //除了以上,其他都是错的
    //int[] arr2 = new int[3]{1,2,3};//错误
    //调用
    System.out.println(prices[0]);
    //System.out.println(prices[3]);//异常:ArrayIndexOutOfBoundsException

    foods[0] = "苹果";
    //foods[4] = "香蕉";//ArrayIndexOutOfBoundsException: Index 4 out of bounds for length 4

    //数组的长度
    System.out.println(prices.length);

    //遍历
    for (int i = 0; i < foods.length; i++) {
      System.out.println(foods[i]);
    }

    //默认值
    char[] arr3 = new char[2];
    System.out.println(arr3[0] == 0);
    char c1 = '\u0000';
    System.out.println(c1 == 0);//0就是\u0000dcs
  }
}
