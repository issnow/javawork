package java1;
/*
类的成员之二：方法
方法 (method 、函数) 的理解
方法是类或对象行为特征的抽象，用来完成某个功能操作。在某些语言中也称为 函数或 过程。
将功能封装为方法的目的是，可以实现代码重用，减少冗余，简化代码
Java里的方法 不能独立存在，所有的方法必须定义在类里。
1、声明方法的语法格式
  [修饰符] [其他修饰符] 返回值类型 方法名([形参列表])[throws 异常列表]{ 方法体的功能代码 }
  (1)一个完整的方法 = 方法头 + 方法体。
    方法头就是[修饰符] 返回值类型 方法名([形参列表])[throws 异常列表]，也称为
    方法签名。通常调用方法时只需要关注方法头就可以，从方法头可以看出这个方法的功能
    和调用格式。
    方法体就是方法被调用后要执行的代码。对于调用者来说，不了解方法体如何实现的，并
    不影响方法的使用。
  (2)方法头可能包含5个部分
    ☆修饰符 可选的。方法的修饰符也有很多，例如： public 、 protected 、缺省、 private 、 static 、
      abstract 、 native 、 final 、 synchronized 等，后面会一一学习。
      – 其中，权限修饰符有 public 、 protected 、 private 。在讲封装性之前，我们
      先默认使用 public 修饰方法。
      – 其中，根据是否有 static ，可以将方法分为静态方法和非静态方法。其中静
      态方法又称为类方法，非静态方法又称为实例方法。咱们在讲 static 前先
      学习实例方法。
    ☆返回值类型 表示方法运行的结果的数据类型，方法执行后将结果返回到调用者。
      – 无返回值，则声明： void
      – 有返回值，则声明出返回值类型(可以是任意类型)。与方法体中 return 返回值 搭配使用
    ☆方法名 属于标识符，命名时遵循标识符命名规则和规范， 见名知意
    ☆形参列表 表示完成方法体功能时需要外部提供的数据列表。可以包含零个，一个 或多个参数。
      – 无论是否有参数， 不能省略
      – 如果有参数，每一个参数都要指定数据类型和参数名，多个参数之间使用
      逗号分隔，例如：
        • 一个参数： (数据类型 参数名)
        • 二个参数： (数据类型 1 参数 1, 数据类型 2 参数 2)
        – 参数的类型可以是基本数据类型、引用数据类型
    ☆throws 异常列表 可选，在【第 09 章 异常处理】章节再讲
  (3)方法体：方法体必须有{}括起来，在{}中编写完成方法功能的代码
  (4)关于方法体中return语句的说明：
    return语句的作用是结束方法的执行，并将方法的结果返回去
    如果返回值类型不是 void ，方法体中必须保证一定有 return 返回值 ; 语句，并且要求该返
    回值结果的类型与声明的返回值类型一致或兼容。
    如果返回值类型为void 时，方法体中可以没有 return 语句，如果要用 return 语句提前结
    束方法的执行，那么 return 后面不能跟返回值，直接写 return ; 就可以。
    return语句后面就不能再写其他代码了，否则会报错： Unreachable code
2.注意
（1）必须先声明后使用，且方法必须定义在类的内部
（2）调用一次就执行一次，不调用不执行。
（3）方法中可以调用类中的方法或属性，不可以在方法内部定义方法。
3.关键字 return 的使用
  return在方法中的作用：
    – 作用 1 ：结束一个方法
    – 作用 2 ：结束一个方法的同时，可以返回数据给方法的调用者
    注意点：在 return 关键字的直接后面不能声明执行语句
4.方法调用内存分析
  方法没有被调用的时候，都在 方法区中的字节码文件 (.class) 中存储。
  方法被调用的时候，需要进入到 栈内存中运行。方法每调用一次就会在栈中有一个 入栈动
  作，即给当前方法开辟一块独立的内存区域，用于存储当前方法的局部变量的值。
  当方法执行结束后，会释放该内存，称为出栈，如果方法有返回值，就会把结果返回调用
  处，如果没有返回值，就直接结束，回到调用处继续执行下一条指令。
  栈结构：先进后出，后进先出。
 */
public class FunctionTest {
}
class Person2 {
  String name;
  int age;
  public void eat() {
    System.out.println("eat");
  }
  public void sleep(int hour) {
    System.out.println("sleep" + hour);
  }
  public String interests(String hobby){
    String info = "My hobby is " + hobby;
    return info;
  }
  public int getAge() {
    return age;
  }
}